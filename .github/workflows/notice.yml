name: Notify Version Changes

on:
  workflow_dispatch: 

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch previous version.json
        id: prev
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Fetching previous version.json..."
          PREV=$(curl -s -H "Authorization: token $GH_TOKEN" "https://api.github.com/repos/${{ github.repository }}/contents/version.json?ref=HEAD^")
          
          STATUS=$(echo "$PREV" | jq -r '.message // empty')
          if [ "$STATUS" = "Not Found" ] || [ -z "$PREV" ]; then
            echo "{}" > prev.json
            echo "No previous version found, using empty JSON."
          else
            echo "$PREV" | jq -r '.content' | base64 -d > prev.json
          fi

      - name: Fetch current version.json
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Fetching current version.json..."
          CUR=$(curl -s -H "Authorization: token $GH_TOKEN" "https://api.github.com/repos/${{ github.repository }}/contents/version.json")
          
          STATUS=$(echo "$CUR" | jq -r '.message // empty')
          if [ "$STATUS" = "Not Found" ] || [ -z "$CUR" ]; then
            echo "Current version.json not found!"
            exit 1
          else
            echo "$CUR" | jq -r '.content' | base64 -d > curr.json
          fi

      - name: Generate diff
        id: diff
        env:
          ROLE_ID: ${{ secrets.DISCORD_ROLE_ID }}
        run: |
          echo "Generating diff..."
          jq empty prev.json || { echo "prev.json invalid"; exit 1; }
          jq empty curr.json || { echo "curr.json invalid"; exit 1; }

          # Read JSONs into bash variables
          PREV=$(cat prev.json)
          CUR=$(cat curr.json)

          MSG=$(jq -n --argjson prev "$PREV" --argjson curr "$CUR" '
            ($curr | to_entries)
            | map(select(.value != "" and .value != ($prev[.key] // "")))
            | map("\(.key) [\($prev[.key] // "empty")] -> [\(.value)]")
            | join("\n")
          ')

          if [ -z "$MSG" ]; then
            echo "No meaningful changes detected"
            echo "CHANGED=false" >> $GITHUB_OUTPUT
          else
            if [ -n "$ROLE_ID" ]; then
              MSG="<@&${ROLE_ID}> **Shikikan, new cdn version(s) just dropped:**\n$MSG"
            else
              MSG="**Shikikan, new cdn version(s) just dropped:**\n$MSG"
            fi
            echo -e "$MSG" > diff.txt
            echo "CHANGED=true" >> $GITHUB_OUTPUT
          fi

      - name: Send Discord notification
        if: steps.diff.outputs.CHANGED == 'true'
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          echo "Sending Discord notification..."
          CONTENT=$(cat diff.txt)          
          PAYLOAD=$(jq -n --arg msg "$CONTENT" '{content: $msg}')

          curl -H "Content-Type: application/json" \
               -X POST \
               -d "$PAYLOAD" \
               $DISCORD_WEBHOOK
